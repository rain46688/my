<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.kh.spring" />
	
	<!-- 새로운 POJO를 스프링 BEAN으로 등록하기 , 항상 xml에 등록할때는 클래스 패키지명을 전부 입력하자! -->
	<!-- @Component 어노테이션 처리랑 같은 기능을함 만들면 옆에 BeanTest 자바 클래스 옆에 S 생김 -->
	<!-- 내 코드면 상관없지만 남이 만든 라이브러리에 객체를 생성할때는 xml방식을 사용해야된다! -->
	<beans:bean id="test1" class="com.kh.spring.BeanTest">
	<!-- property 하면 BeanTest의 setter를 찾는거임 -->
		<beans:property name="name" value="홍지운"/>
	</beans:bean>
	<!-- 같은 타입의 빈을 아이디가 달라도 2개이상이면 자동으로 주입이 안된다! -->
	<beans:bean id="test2" class="com.kh.spring.BeanTest">
		<beans:property name="name" value="이승환"/>
	</beans:bean>
	
	<!-- 생성자를 이용해서 bean 을 생성하게 하는 방법 -->
	<beans:bean id="test3" class="com.kh.spring.BeanTest">
		<beans:constructor-arg index="0" value="박정연"/>
	</beans:bean>
	
	<!-- 인터셉터 -->
	<!-- 매핑 : 주소값과 연결한다는 의미 -->
	<beans:bean id="test" class="com.kh.spring.common.interceptor.LoggerInterceptor"/>
	<interceptors>
	<!-- 	<interceptor>
			<mapping path="/**"/>
			<mapping path="/**"/> 이렇게 전체로 해놓으면 css나js 파일 받아올때 에러가 날수도있다함!!
			<exclude-mapping path="/"/>
			<exclude-mapping path="/"/> 는 그냥 / 는 제외해라라는 의미
			<beans:ref bean="test"/>
			beans:ref bean="test"/>랑 위에<beans:bean id="test" ~ 없이 아래꺼만 안에 적어도됨!
			<beans:bean id="loggerInterceptor" class="com.kh.spring.common.interceptor.LoggerInterceptor"/>
		</interceptor>
		<interceptor>
			<mapping path="/member/memberLogin.do"/>
			<beans:bean class="com.kh.spring.common.interceptor.LoginLoggerInterceptor"/>
		</interceptor> -->
		
			<interceptor>
			<mapping path="/*/*.do"/>
			<beans:bean class="com.kh.spring.common.interceptor.LoginCheckInterceptor"/>
		</interceptor>
	</interceptors>	
	
	<!-- 파일 업로드  처리를 위한 resolver 객체를 springbean으로 등록하기 -->
	<beans:bean id="multipartResolver"
	class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<!-- 최대 업로드 사이즈를 무조건 정해줘야된다! 10485760(1024*1024*10)는 10메가다 -->
	<beans:property name="maxUploadSize" value="10485760"></beans:property>
	</beans:bean>
	
</beans:beans>
